const { deterministicPartitionKey } = require("./dpk");

describe("deterministicPartitionKey", () => {
  it("Returns the literal '0' when given no input", () => {
    const trivialKey = deterministicPartitionKey();
    expect(trivialKey).toBe("0");
  });
  it("trivial key is generated by crypto, when event is passed but partitionKey is not present", () => {
    const trivialKey = deterministicPartitionKey({});
    expect(trivialKey.length).not.toBe(0);
  });
  it("trivial key is partitionKey, when event is passed and partitionKey is present", () => {
    const trivialKey = deterministicPartitionKey({partitionKey : "mockPartitionKey"});
    expect(trivialKey).toBe("mockPartitionKey");
  });
  it("trivial key is partitionKey, when event is passed and partitionKey is present but not string", () => {
    const trivialKey = deterministicPartitionKey({partitionKey : {}});
    expect(typeof trivialKey).toBe("string");
  });
  it("trivial key is generated by crypto, when event is passed and partitionKey is present, but length is more than 256", () => {
    let mockPartitionKey = "a";
    for(let i=0;i<256;i++){
      mockPartitionKey+="a";
    }
    const trivialKey = deterministicPartitionKey({partitionKey : mockPartitionKey});
    expect(trivialKey).not.toBe(mockPartitionKey);
  });
});

